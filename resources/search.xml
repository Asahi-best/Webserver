<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>近况</title>
      <link href="/2022/06/13/%E8%BF%91%E5%86%B5/"/>
      <url>/2022/06/13/%E8%BF%91%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="6-13"><a href="#6-13" class="headerlink" title="6.13"></a>6.13</h1><p>颓废摆烂了小半个月，从新开始干活咯~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记</title>
      <link href="/2022/05/31/C++%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/31/C++%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="黑马程序员匠心之作-C-教程从0到1入门编程-学习编程不再难"><a href="#黑马程序员匠心之作-C-教程从0到1入门编程-学习编程不再难" class="headerlink" title="黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难"></a>黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难</h1><p>B站： <a href="https://www.bilibili.com/video/BV1et411b73Z?p=311">https://www.bilibili.com/video/BV1et411b73Z?p=311</a></p><p>黑马C++开发全套教程： <a href="https://pan.baidu.com/s/1vTXgoXql0JZIuThKIMJJCA">网盘</a>|提取码： 1234</p><p>个人笔记主要针对我自己回顾内容都会有所省略和<strong>精简</strong>，网盘中有很详细的官方笔记，<strong>根据自己需求选择</strong>。</p><blockquote><p>建议下载，里面有详细的笔记可以配合自己的方式进行整理</p></blockquote><h2 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h2><h3 id="C-初识"><a href="#C-初识" class="headerlink" title="C++初识"></a>C++初识</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>单行注释： &#x2F;&#x2F;</li><li>多行注释： &#x2F;*    *&#x2F;</li><li>VS快捷操作：     <code>Ctrl + K</code>选中    <code>Ctrl + C</code>注释    <code>Ctrl + U</code>取消注释</li></ul><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><h4 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h4><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="sizeof关键字"><a href="#sizeof关键字" class="headerlink" title="sizeof关键字"></a>sizeof关键字</h4><p>作用： 统计数据类型所占内存大小</p><p>语法： <code>sizeof(数据类型/变量)</code></p><h4 id="数据的输入"><a href="#数据的输入" class="headerlink" title="数据的输入"></a>数据的输入</h4><p>作用： 从键盘获取数据</p><p>关键字： cin</p><p>语法： <code>cin &gt;&gt; 变量</code></p><hr><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p><code>%</code>: 取模(取余)</p><p><code>++a</code>: 前置递增</p><p><code>a++</code>: 后置递增</p><blockquote><p>前置先对变量进行++，再计算表达式</p></blockquote><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>| <strong>运算符</strong> | <strong>术语</strong> | <strong>示例</strong> | <strong>结果</strong>|<br>| —– | —-     |———-|—– ———————————-|<br>| !     | 非       | !a       | 如果a为假，则!a为真；  如果a为真，则!a为假。|<br>| &amp;&amp;    | 与       | a &amp;&amp; b   | 如果a和b都为真，则结果为真，否则为假。      |<br>| ||  | 或       | a || b | 如果a和b有一个为真，则结果为真，二者都为假时，结果为假。 |</p><hr><h3 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h3><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p>语法： <code>表达式1 ? 表达式2 ：表达式3</code></p><p>解释： 如果表达式1为真返回表达式2否则返回表达式3</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = (a&gt;b ? a : b)    <span class="comment">//返回ab中较大的值</span></span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">1</span>：</span><br><span class="line">    执行语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">2</span>：</span><br><span class="line">    执行语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    执行语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><p><code>break</code>: 跳出结构</p><p><code>continue</code>: 跳过这次循环</p><p><code>goto</code>: 无条件跳转语句</p><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名 (参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    函数体语句;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回值类型： 一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><h4 id="函数的常见样式"><a href="#函数的常见样式" class="headerlink" title="函数的常见样式"></a>函数的常见样式</h4><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><h4 id="函数的分文件编写"><a href="#函数的分文件编写" class="headerlink" title="函数的分文件编写"></a>函数的分文件编写</h4><ol><li>创建.h后缀名的头文件</li><li>创建.cpp后缀名的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><hr><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义指针</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> * p = &amp;a;    <span class="comment">//数据类型 * 指针变量名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用指针</span></span><br><span class="line">*p = <span class="number">100</span>;    <span class="comment">//指针前加*代表解引用，找到指针指向的内存中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针所占内存空间</span></span><br><span class="line"><span class="built_in">sizeof</span>(<span class="type">int</span>*)    <span class="comment">//32位系统4个字节    64位系统8个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空指针不能访问    0-255位为系统占用</span></span><br><span class="line"><span class="type">int</span> * p = <span class="literal">NULL</span>;    <span class="comment">//利用空指针进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//野指针：指针变量指向非法的内存空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const后修饰的量无法更改    *指针    const常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * p = &amp;a;    <span class="comment">//常量指针    指向可改，值不能改</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p = &amp;a;    <span class="comment">//指针常量    指向不可改，值能改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递不会改变实参    地址传递会改变实参</span></span><br><span class="line"><span class="comment">//将函数中的形参改为指针，可以减少内存空间，而且不会复制新的副本出来</span></span><br></pre></td></tr></table></figure><h2 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h2><h3 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h3><p>C++程序在执行时，将内存大方向划分为4个区域</p><p>程序运行前: </p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的    &#x2F;&#x2F;存放二进制数据；特点：共享，只读</li><li>全局区： 存放全局变量和静态变量（static关键字）以及常量（const修饰的全局常量和字符串常量）    &#x2F;&#x2F;在程序结束后由系统操作释放</li></ul><p>程序运行后: </p><ul><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等    &#x2F;&#x2F;不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收    &#x2F;&#x2F;new创建    delete删除</li></ul><p>内存四区的意义： 不同区域存放的数据，赋予不同的生命周期，给我们更大的员活编程</p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用（给变量起别名）    本质：C++内部一个指针常量</span></span><br><span class="line"><span class="comment">//引用必须初始化，且初始化后就不可更改</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure><hr><h3 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数默认值    没传就用默认值</span></span><br><span class="line"><span class="comment">//如果某个位置已经有了默认参数，那么从这个位置之后都必须有默认值</span></span><br><span class="line"><span class="comment">//如果函数声明有默认参数，函数实现就不能有默认参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//站位参数    返回值类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数重载（函数名可以相同，提高复用性）</span></span><br><span class="line"><span class="comment">//同一作用域；函数名称相同；函数参数类型不同，或者个数不同，或者顺序不同</span></span><br><span class="line"><span class="comment">//引用作为重载条件；函数重载碰到函数默认参数（容易产生二义性尽量避免）</span></span><br></pre></td></tr></table></figure><hr><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>C++面向对象的三大特性：封装、继承、多态</p><p>C++认为万事万物都皆为对象，对象上有其属性和行为</p><p>具有相同性质的对象，可以抽象为类</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>封装的意义： </p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制<br>访问权限：<ol><li>public    公共权限</li><li>protected 保护权限</li><li>private   私有权限</li></ol></li></ul><p>struct默认权限为公有；class默认权限为私有</p><p>将成员属性设为私有的优点： </p><ol><li>可以自己控制读写权限</li><li>对于写权限，我们可以检测数据的有效性</li></ol><h4 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h4><p>构造函数： 为对象成员属性复制，由编译器自动调用</p><ul><li>语法： <code>类名()&#123;&#125;</code>  <ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol></li><li>分类：  <ol><li>按参数分为： 有参构造和无参构造</li><li>按类型分为： 普通构造和拷贝构造</li></ol></li><li>调用方法： 括号法    显示法    隐式转换法  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//括号法，常用</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line"><span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显式法</span></span><br><span class="line">Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>); </span><br><span class="line">Person p3 = <span class="built_in">Person</span>(p2);</span><br><span class="line"><span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//隐式转换法</span></span><br><span class="line">Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10); </span></span><br><span class="line">Person p5 = p4; <span class="comment">// Person p5 = Person(p4); </span></span><br><span class="line"><span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line"><span class="comment">//Person p5(p4);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>拷贝构造函数调用时机</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p>析构函数： 对象销毁前系统自动调用，执行一些清理工作</p><ul><li>语法： <code>~类名()&#123;&#125;</code>  <ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用析构，无须手动调用,而且只会调用一次</li></ol></li><li>调用规则：  <ul><li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li></ul></li></ul><p>深拷贝与浅拷贝</p><p>浅拷贝： 简单的复制拷贝操作    问题： 堆区数据重复释放</p><p>深拷贝： 在堆区重新申请空间，进行拷贝操作</p><p>初始化列表</p><p>语法： <code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p>类对象可以作为类成员</p><p>静态成员</p><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><hr><h3 id="C-对象模型和this指针"><a href="#C-对象模型和this指针" class="headerlink" title="C++对象模型和this指针"></a>C++对象模型和this指针</h3><h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h4><p>概念： this指针指向被调用的成员函数所属的对象</p><p>本质： this指针的本质是指针常量</p><p>用途：  </p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><h4 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h4><p>空指针也能调用成员函数需要加入判断增加代码健壮性（空指针调用this报错）</p><h4 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><h4 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h4><p>目的： 让一个函数或者类访问另一个类中私有成员</p><p>关键字： friend</p><p>友元的三种实现： </p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p>链式编程思想返回自身调用</p><p>概念： 对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><p>加号运算符重载： 实现两个自定义数据类型相加的运算</p><p>左移运算符重载： 可以输出自定义数据类型</p><p>递增运算符重载： 通过重载递增运算符，实现自己的整型数据</p><p>关系运算符重载： 重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p>赋值运算符重载： </p><p>C++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator&#x3D;, 对属性进行值拷贝</li></ol><blockquote><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题(先释放堆区数据再深拷贝)</p></blockquote><p>函数调用运算符重载： 重载()操作符，又称为仿函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class MyPrint</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(string text)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">//重载的（）操作符 也称为仿函数</span><br><span class="line">MyPrint myFunc;</span><br><span class="line">myFunc(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyAdd</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int operator()(int v1, int v2)</span><br><span class="line">&#123;</span><br><span class="line">return v1 + v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">MyAdd add;</span><br><span class="line">int ret = add(10, 10);</span><br><span class="line">cout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//匿名对象调用  </span><br><span class="line">cout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>作用： 减少重复代码</p><h4 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h4><p>语法： <code>class A :继承方式 B&#123;&#125;</code></p><p>A类称为子类或派生类</p><p>B类称为父类或基类</p><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><p>继承方式：</p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><h4 id="继承中构造和析构顺序"><a href="#继承中构造和析构顺序" class="headerlink" title="继承中构造和析构顺序"></a>继承中构造和析构顺序</h4><p>继承中调用构造函数先父类后子类，析构相反</p><h4 id="继承同名成员处理方式"><a href="#继承同名成员处理方式" class="headerlink" title="继承同名成员处理方式"></a>继承同名成员处理方式</h4><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><h4 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h4><p>语法： <code>class 子类 :继承方式 父类1 ， 继承方式 父类2...</code></p><blockquote><p>访问容易产生二义性，实际开发中不建议使用<br>多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p>使用虚继承解决</p><p>关键字： virtual</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tuo</span>   : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepTuo</span> : <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SheepTuo st;</span><br><span class="line">st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>分类： <ol><li>静态多态： 函数重载和运算符重载属于静态多态，复用函数名</li><li>动态多态： 派生类和虚函数实现运行时多态</li></ol></li><li>静态多态和动态多态的区别：   <ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul></li><li>多态满足条件： <ol><li>有继承关系</li><li>子类重写父类中的虚函数<br> 重写： 函数返回值类型、函数名、参数列表完全一致称为重写</li></ol></li><li>多态使用条件： 父类指针或引用指向子类对象<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Speak函数就是虚函数</span></span><br><span class="line"><span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DoSpeak</span><span class="params">(Animal &amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">animal.<span class="built_in">speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cat cat;</span><br><span class="line"><span class="built_in">DoSpeak</span>(cat);</span><br><span class="line"></span><br><span class="line">Dog dog;</span><br><span class="line"><span class="built_in">DoSpeak</span>(dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><p>语法： <code>virtual 返回值类型 函数名 (参数列表)= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为抽象类</p><p>抽象类特点： </p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line"><span class="comment">//抽象类无法实例化对象</span></span><br><span class="line"><span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base * base = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">base = <span class="keyword">new</span> Son;</span><br><span class="line">base-&gt;<span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：<code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：<br><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class="line"><span class="comment">//virtual ~Animal()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Cat</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *m_Name &lt;&lt;  <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Cat</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Name;</span><br><span class="line">m_Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string *m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal *animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;<span class="built_in">Speak</span>();</span><br><span class="line"><span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line"><span class="comment">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class="line"><span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>​1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象<br>​2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构<br>​3. 拥有纯虚析构函数的类也属于抽象类  </p><hr><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>文本类型： </p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类：</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>写文件： </p><ol><li>包含头文件    <code>#include &lt;fstream&gt;</code></li><li>创建流对象    <code>ofstream ofs;</code></li><li>打开文件      <code>ofs.open(&quot;文件路径&quot;, 打开方式);</code></li><li>写数据        <code>ofs &lt;&lt; &quot;写入的数据&quot;;</code></li><li>关闭文件      <code>ofs.close();</code></li></ol><p>文件打开方式： </p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;近月少女的礼仪.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;姓名：小仓朝日&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>与写文件流程基本相同，但是打开之后可以加入判断文件是否打开成功</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;近月少女的礼仪.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;h！不准进来&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line"><span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//while (ifs &gt;&gt; buf)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="comment">//string buf;</span></span><br><span class="line"><span class="comment">//while (getline(ifs, buf))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c = ifs.<span class="built_in">get</span>()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><p>语法： <code>template&lt;typename T&gt;</code></p><blockquote><p>template – 声明创建模板<br>typename – 一种数据类型，可以用class代替<br>T – 通用的数据类型，名称可以替换，通常为大写字母</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mySwap</span>(a, b)    <span class="comment">//自动类型推导</span></span><br><span class="line"><span class="built_in">mySwap</span>&lt;<span class="type">int</span>&gt;(a, b)    <span class="comment">//显示指定类型</span></span><br></pre></td></tr></table></figure><blockquote><p>自动类型推导，必须推导出一直的数据类型T才可以使用<br>模板必须要确定出T的数据类型才可以使用<br>不要同时使用函数模板和普通函数，避免二义性</p></blockquote><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">P1</span>(<span class="string">&quot;小仓朝日&quot;</span>, <span class="number">18</span>);</span><br><span class="line">P1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类模板和函数模板的区别<ul><li>类模板只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul></li><li>类模板中的成员函数并不是一开始就创建的，在调用时才去创建</li><li>类模板实例化出的对象，向函数传参的方式<ol><li><strong>指定传入的类型 – 直接显示对象的数据类型</strong></li><li>参数模板话 – 将对象的参数变为模板进行传递</li><li>整个类模板话 – 将这个对象类型模板化进行传递</li></ol></li><li>如果父类是类模板，子类需要指定出父类中T的数据类型</li><li>类模板中成员函数类外实现时，需要加上模板参数列表</li><li>类模板分文件编写<ol><li>直接包含<code>.cpp</code>源文件</li><li>将声明和实现写到同一个文件中，并更改后缀名为<code>.hpp</code></li></ol></li><li>类模板与友元<ul><li>全局函数类内实现 – 直接再类内声明友元即可</li><li>全局函数类外实现 – 需要提前让编译器知道全局函数的存在</li></ul></li></ul><h3 id="STL初识"><a href="#STL初识" class="headerlink" title="STL初识"></a>STL初识</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>STL（Standard Template Library，标准模板库）</li><li>广义上分为： 容器（container）、算法（algorithm）、迭代器（iterator）</li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接</li></ul><h4 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a>STL六大组件</h4><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂</li><li>仿函数：行为类似函数，可作为算法的某种策略</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西</li><li>空间配置器：负责空间的配置与管理</li></ol><h3 id="STL-常用容器"><a href="#STL-常用容器" class="headerlink" title="STL-常用容器"></a>STL-常用容器</h3><h4 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h4><ul><li>本质： 一个类</li><li><code>string</code>和<code>char*</code>的区别： <ul><li><code>char*</code> 是一个指针</li><li><code>string</code>是一个类，类内部封装了<code>char*</code>，管理这个字符串，是一个char*型的容器</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">string s;    <span class="comment">//默认构造值为空</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;Come on!&quot;</span>)</span></span>;    <span class="comment">//赋值构造</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="number">3</span>, <span class="string">&#x27;h&#x27;</span>)</span></span>;    <span class="comment">//hhh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接</span></span><br><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;我&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;喜欢&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;小仓朝日&quot;</span>)</span></span>;    <span class="comment">//一个中文2个字符</span></span><br><span class="line">string s = s1 + s2;    <span class="comment">//我喜欢</span></span><br><span class="line">s = s1.<span class="built_in">append</span>(s2);    <span class="comment">//我喜欢</span></span><br><span class="line">s = s.<span class="built_in">append</span>(s3, <span class="number">4</span>, <span class="number">4</span>);    <span class="comment">//我喜欢朝日    参数1：开始截取位置    参数2：截取字符个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找和替换</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;abcdefcd&quot;</span>)</span></span>;</span><br><span class="line">s.<span class="built_in">find</span>(<span class="string">&quot;cd&quot;</span>);    <span class="comment">//2；返回第一个找到的头字符串位置</span></span><br><span class="line">s.<span class="built_in">replace</span>(<span class="number">6</span>, <span class="number">7</span>, <span class="string">&quot;gl&quot;</span>);    <span class="comment">//abcdefgl    参数1：初始位置    参数2：结束位置    参数3：替换的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问或修改    arr[i]下标访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;abcd&quot;</span>)</span></span>;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;abc&quot;</span>);    <span class="comment">//aabcbcd    参数1：插入初始位置</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);    <span class="comment">//abcd    参数1：删除初始位置    参数2：删除结束位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子串</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;abcd&quot;</span>)</span>；</span></span><br><span class="line"><span class="function">s.<span class="title">substr</span><span class="params">(<span class="number">1</span>, <span class="number">3</span>)</span></span>;    <span class="comment">//bcd    参数1：起始位置    参数2：结束位置</span></span><br></pre></td></tr></table></figure><h4 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h4><ul><li>单端数组</li><li>动态扩展<ul><li>找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;    <span class="comment">//[0, 0]    参数1：数组长度    参数2：数组元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//容量和大小操作</span></span><br><span class="line"><span class="built_in">empty</span>();    <span class="comment">//判断是否为空</span></span><br><span class="line"><span class="built_in">capacity</span>();    <span class="comment">//容器的容量</span></span><br><span class="line"><span class="built_in">size</span>();    <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num, elem);    <span class="comment">//重新指定长度，elem为填充值（默认为0可以不写）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="built_in">push_back</span>(elem);    <span class="comment">//尾部插入元素elem</span></span><br><span class="line"><span class="built_in">pop_back</span>();    <span class="comment">//删除最后一个元素</span></span><br><span class="line"><span class="built_in">insert</span>(const_iterator pos, <span class="type">int</span> count, elem);    <span class="comment">//迭代器指向位置pos插入count个元素elem（count默认为1可以不写）</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator pos);    <span class="comment">//删除迭代器指向的元素</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator start, const_iterator end);    <span class="comment">//删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="built_in">clear</span>();    <span class="comment">//删除容器中所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="built_in">at</span>(<span class="type">int</span> idx);    <span class="comment">//返回索引idx所指的数据</span></span><br><span class="line"><span class="keyword">operator</span>[];    <span class="comment">//返回索引idx所指的数据</span></span><br><span class="line"><span class="built_in">front</span>();    <span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line"><span class="built_in">back</span>();    <span class="comment">//返回容器中最后一个数据元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交换容器</span></span><br><span class="line"><span class="built_in">swap</span>(vec);    <span class="comment">//将vec与本身的元素互换</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);    <span class="comment">//用匿名对象收缩内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//预留空间    （减少vector在动态扩展容量时的扩展次数）</span></span><br><span class="line"><span class="built_in">reserve</span>(<span class="type">int</span> len);    <span class="comment">//容器预留len个元素长度，预留位置不初始化，元素不可访问</span></span><br></pre></td></tr></table></figure><h4 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h4><ul><li>双端数组，可以对头端进行插入删除操作</li><li>deque和vector的区别<ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul></li><li>deque内部工作原理：<ul><li>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</li><li>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;    <span class="comment">//[0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//容量和大小操作</span></span><br><span class="line"><span class="built_in">empty</span>();    <span class="comment">//判断是否为空</span></span><br><span class="line"><span class="built_in">size</span>();    <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num, elem);    <span class="comment">//重新指定长度，elem为填充值（默认为0可以不写）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="built_in">push_back</span>();    <span class="comment">//在容器尾部添加一个数据</span></span><br><span class="line"><span class="built_in">push_front</span>();    <span class="comment">//在容器头部插入一个数据</span></span><br><span class="line"><span class="built_in">pop_back</span>();    <span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">pop_front</span>();    <span class="comment">//删除容器第一个数据</span></span><br><span class="line"><span class="built_in">insert</span>(pos, elem);    <span class="comment">//在pos位置插入一个elem元素的拷贝，返回新数据的位置</span></span><br><span class="line"><span class="built_in">insert</span>(pos, n, elem);    <span class="comment">//在pos位置插入n个elem数据，无返回值</span></span><br><span class="line"><span class="built_in">insert</span>(pos, beg, end);    <span class="comment">//在pos位置插入[beg, end)区间的数据，无返回值</span></span><br><span class="line"><span class="built_in">clear</span>();    <span class="comment">//清空容器的所有数据</span></span><br><span class="line"><span class="built_in">erase</span>(beg, end);    <span class="comment">//删除[beg, end)区间的数据，返回下一个数据的位置</span></span><br><span class="line"><span class="built_in">erase</span>(pos);    <span class="comment">//删除pos位置的数据，返回下一个数据的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="built_in">at</span>(<span class="type">int</span> idx);    <span class="comment">//返回索引idx所指的数据</span></span><br><span class="line"><span class="keyword">operator</span>[];    <span class="comment">//返回索引idx所指的数据</span></span><br><span class="line"><span class="built_in">front</span>();    <span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line"><span class="built_in">back</span>();    <span class="comment">//返回容器中最后一个数据元素</span></span><br></pre></td></tr></table></figure><h4 id="stact容器"><a href="#stact容器" class="headerlink" title="stact容器"></a>stact容器</h4><ul><li>栈，先进后出一个出入口</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="built_in">push</span>(elem);    <span class="comment">//向栈顶添加元素</span></span><br><span class="line"><span class="built_in">pop</span>();    <span class="comment">//从栈顶移除第一个元素</span></span><br><span class="line"><span class="built_in">top</span>();    <span class="comment">//返回栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大小操作</span></span><br><span class="line"><span class="built_in">empty</span>();    <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">size</span>();    <span class="comment">//返回栈的大小</span></span><br></pre></td></tr></table></figure><h4 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h4><ul><li>队列，先进先出两个出口</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="built_in">push</span>(elem);    <span class="comment">//往队尾添加元素</span></span><br><span class="line"><span class="built_in">pop</span>();    <span class="comment">//从队头移除第一个元素</span></span><br><span class="line"><span class="built_in">back</span>();    <span class="comment">//返回最后一个元素</span></span><br><span class="line"><span class="built_in">front</span>();    <span class="comment">//返回第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大小操作</span></span><br><span class="line"><span class="built_in">empty</span>();    <span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="built_in">size</span>();    <span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure><h4 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h4><ul><li>链表，STL中的链表是一个双向循环链表</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt; l;</span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(<span class="number">5</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大小操作</span></span><br><span class="line"><span class="built_in">empty</span>();    <span class="comment">//判断是否为空</span></span><br><span class="line"><span class="built_in">size</span>();    <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="built_in">resize</span>(num, elem);    <span class="comment">//重新指定长度，elem为填充值（默认为0可以不写）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="built_in">push_back</span>(elem);    <span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line"><span class="built_in">pop_back</span>();    <span class="comment">//删除容器中最后一个元素</span></span><br><span class="line"><span class="built_in">push_front</span>(elem);    <span class="comment">//在容器开头插入一个元素</span></span><br><span class="line"><span class="built_in">pop_front</span>();    <span class="comment">//从容器开头移除第一个元素</span></span><br><span class="line"><span class="built_in">insert</span>(pos, elem);    <span class="comment">//在pos位置插elem元素的拷贝，返回新数据的位置</span></span><br><span class="line"><span class="built_in">insert</span>(pos, n, elem);    <span class="comment">//在pos位置插入n个elem数据，无返回值</span></span><br><span class="line"><span class="built_in">insert</span>(pos, beg, end);    <span class="comment">//在pos位置插入[beg, end)区间的数据，无返回值</span></span><br><span class="line"><span class="built_in">clear</span>();    <span class="comment">//移除容器的所有数据</span></span><br><span class="line"><span class="built_in">erase</span>(beg, end);    <span class="comment">//删除[beg, end)区间的数据，返回下一个数据的位置</span></span><br><span class="line"><span class="built_in">erase</span>(pos);    <span class="comment">//删除pos位置的数据，返回下一个数据的位置</span></span><br><span class="line"><span class="built_in">remove</span>(elem);    <span class="comment">//删除容器中所有与elem值匹配的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="built_in">front</span>();    <span class="comment">//返回第一个元素</span></span><br><span class="line"><span class="built_in">back</span>();    <span class="comment">//返回最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//算法</span></span><br><span class="line"><span class="built_in">reverse</span>();    <span class="comment">//反转链表</span></span><br><span class="line"><span class="built_in">sort</span>();    <span class="comment">//链表排序</span></span><br></pre></td></tr></table></figure><h4 id="set-x2F-multiset容器"><a href="#set-x2F-multiset容器" class="headerlink" title="set&#x2F;multiset容器"></a>set&#x2F;multiset容器</h4><ul><li>集合，插入时自动排序，属于关联式容器，底层结构是二叉树实现</li><li>set不允许容器中有重复元素，multiset允许</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大小和交换</span></span><br><span class="line"><span class="built_in">size</span>();    <span class="comment">//返回容器中元素的数目</span></span><br><span class="line"><span class="built_in">empty</span>();    <span class="comment">//判断容器是否为空</span></span><br><span class="line"><span class="built_in">swap</span>(st);    <span class="comment">//交换两个集合容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="built_in">insert</span>(elem);    <span class="comment">//在容器中插入元素</span></span><br><span class="line"><span class="built_in">clear</span>();    <span class="comment">//清除所有元素</span></span><br><span class="line"><span class="built_in">erase</span>(pos);    <span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(beg, end);    <span class="comment">//删除区间[beg, end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(elem);    <span class="comment">//删除容器中值为elem的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找和统计</span></span><br><span class="line"><span class="built_in">find</span>(key);    <span class="comment">//查找key是否存在;若存在，返回该键的元素的迭代器；若不存在，返回set.end()；</span></span><br><span class="line"><span class="built_in">count</span>(key);    <span class="comment">//统计key的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pair对组创建</span></span><br><span class="line"><span class="function">pair&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">pair&lt;string, <span class="type">int</span>&gt; p = <span class="built_in">make_pair</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h4 id="map-x2F-multimap容器"><a href="#map-x2F-multimap容器" class="headerlink" title="map&#x2F;multimap容器"></a>map&#x2F;multimap容器</h4><ul><li>字典，第一个元素为key（键值），第二个元素为value（实值）</li><li>关联式容器，底层结构是二叉树实现</li><li>map不允许容器中有重复key值元素，multimap允许</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大小和交换</span></span><br><span class="line"><span class="built_in">size</span>();    <span class="comment">//返回容器中元素的数目</span></span><br><span class="line"><span class="built_in">empty</span>();    <span class="comment">//判断容器是否为空</span></span><br><span class="line"><span class="built_in">swap</span>(st);    <span class="comment">//交换两个容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="built_in">insert</span>(elem);    <span class="comment">//在容器中插入元素</span></span><br><span class="line"><span class="built_in">clear</span>();    <span class="comment">//清除所有元素</span></span><br><span class="line"><span class="built_in">erase</span>(pos);    <span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(beg, end);    <span class="comment">//删除区间[beg, end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(key);    <span class="comment">//删除容器中值为key的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找和统计</span></span><br><span class="line"><span class="built_in">find</span>(key);    <span class="comment">//查找key是否存在，若存在，返回改键的元素的迭代器；若不存在，返回set.end();</span></span><br><span class="line"><span class="built_in">count</span>(key);    <span class="comment">//统计key的元素个数</span></span><br></pre></td></tr></table></figure><h3 id="STL-函数对象"><a href="#STL-函数对象" class="headerlink" title="STL-函数对象"></a>STL-函数对象</h3><h4 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h4><ul><li>概念：<ul><li>重载函数调用操作符的类，其对象常称为函数对象</li><li>函数对象使用重载的()时，行为类似函数调用，也叫仿函数</li></ul></li><li>本质：<ul><li>函数对象(仿函数)是一个类，不是一个函数</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdd</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v1 + v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyAdd myadd;</span><br><span class="line"><span class="built_in">myadd</span>(<span class="number">10</span> , <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h4 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h4><p>概念：</p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong></li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GreatFive</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">GreatFive</span>();    <span class="comment">//匿名函数对象</span></span><br></pre></td></tr></table></figure><h4 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h4><ul><li>概念：<ul><li>STL内建了一些函数对象</li></ul></li><li>分类：<ul><li>算术仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul></li><li>用法：<ul><li>使用时需要加入头文件<code>#include&lt;functional&gt;</code></li></ul></li></ul><table><thead><tr><th>原型</th><th>仿函数</th></tr></thead><tbody><tr><td><strong>算术仿函数</strong></td><td></td></tr><tr><td>plus</td><td>加法</td></tr><tr><td>minus</td><td>减法</td></tr><tr><td>multiplies</td><td>乘法</td></tr><tr><td>divides</td><td>除法</td></tr><tr><td>modulus</td><td>取模</td></tr><tr><td>negate</td><td>取法</td></tr><tr><td><strong>关系仿函数</strong></td><td></td></tr><tr><td>equal_to</td><td>等于</td></tr><tr><td>not_equal_to</td><td>不等于</td></tr><tr><td>greater</td><td>大于</td></tr><tr><td>greater_equal</td><td>大于等于</td></tr><tr><td>less</td><td>小于</td></tr><tr><td><strong>逻辑仿函数</strong></td><td></td></tr><tr><td>less_equal</td><td>小于等于</td></tr><tr><td>logical_and</td><td>逻辑与</td></tr><tr><td>logical_or</td><td>逻辑或</td></tr><tr><td>logical_not</td><td>逻辑非</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line">plus&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="built_in">p</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">logical_not</span>&lt;<span class="type">bool</span>&gt;();</span><br></pre></td></tr></table></figure><h3 id="STL-常用算法"><a href="#STL-常用算法" class="headerlink" title="STL-常用算法"></a>STL-常用算法</h3><ul><li>算法主要由头文件<code>&lt;algorithm&gt;</code> <code>&lt;numeric&gt;</code> <code>&lt;functional&gt;</code>组成<ul><li><algorithm>是所有STL头文件中最大的一个，范围涉及到比较、交换、查找、遍历操作、复制、修改等等</li><li><numeric>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</li><li><functional>定义了一些类模板，用以声明函数对象</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for_each(实现遍历容器)</span></span><br><span class="line">for_each(iterator beg, iterator end, _func);    <span class="comment">//beg:开始迭代器    _func:函数或者函数对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//transform(搬运容器到另一个容器中)</span></span><br><span class="line"><span class="built_in">transform</span>(iterator beg1, iterator end1, iterator bag2, _func);    <span class="comment">//beg1:源容器开始迭代器    beg2:目标容器开始迭代器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//find(查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end())</span></span><br><span class="line"><span class="built_in">find</span>(iterator beg, iterator end, value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//find_if(按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置)</span></span><br><span class="line"><span class="built_in">find_if</span>(iterator beg, iterator end, _Pred);    <span class="comment">//_Pred函数或谓词</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//adjacent_find(查找相邻重复元素，返回相邻元素的第一个位置的迭代器)</span></span><br><span class="line"><span class="built_in">adjacent_find</span>(iterator beg, iterator end);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//binary_search(二分查找法，查找指定的元素，查到返回true否则返回false)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binary_search</span><span class="params">(iterator beg, iterator end, value)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//count(统计元素出现次数)</span></span><br><span class="line"><span class="built_in">count</span>(iterator beg, iterator end, value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//count_if(按条件统计元素出现次数)</span></span><br><span class="line"><span class="built_in">count_if</span>(iterator beg, iterator end, _Pred);    <span class="comment">//_Pred:谓词</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//sort(对容器内元素进行排序)</span></span><br><span class="line"><span class="built_in">sort</span>(iterator beg, iterator end, _Pred);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//random_shuffle(洗牌，指定范围内的元素随机调整次序)</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(iterator beg, iterator end);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//merge(容器元素合并，并存储到另一容器中;两个容器必须是有序的)</span></span><br><span class="line"><span class="built_in">merge</span>(iteratoe beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//reverse(反转指定范围的元素)</span></span><br><span class="line"><span class="built_in">reverse</span>(iterator beg, iterator end);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//copy(按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置)</span></span><br><span class="line"><span class="built_in">copy</span>(iterator beg, iterator end, iterator dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace(将区间内就元素替换成新元素)</span></span><br><span class="line"><span class="built_in">replace</span>(iterator bag, iterator end, oldvalue, newvalue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace_if(按条件替换元素，满足条件的替换成指定元素)</span></span><br><span class="line"><span class="built_in">replace_if</span>(iterator bag, iterator end, _Pred, newvalue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//swap(互换两容器的元素)</span></span><br><span class="line"><span class="built_in">swap</span>(container c1, container c2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//accumulate(计算容器元素累计总和)</span></span><br><span class="line"><span class="built_in">accumulate</span>(iterator beg, iterator end, value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//fill(向容器中填充元素)</span></span><br><span class="line"><span class="built_in">fill</span>(iterator beg, iterator end, value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//set_intersection(求两个容器的交集)</span></span><br><span class="line"><span class="built_in">set_intersection</span>(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//set_union(求两个集合的并集；两个集合必须是有序序列)</span></span><br><span class="line"><span class="built_in">set_union</span>(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//set_difference(求两个集合的差集；两个集合必须是有序序列)</span></span><br><span class="line"><span class="built_in">set_difference</span>(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</span><br></pre></td></tr></table></figure><h1 id="黑马32期C-就业课"><a href="#黑马32期C-就业课" class="headerlink" title="黑马32期C++就业课"></a>黑马32期C++就业课</h1><p>b站： <a href="https://www.bilibili.com/video/BV1uk4y1m7Eu?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1uk4y1m7Eu?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://pan.baidu.com/s/1IXw2glsPtza-nPly6EOYJg">百度云</a>    提取码： jjwh    解压密码： sgclub@997</p><p><a href="http://dwz.win/UJg">Onedrive</a>    提取码： sgclub@997</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Acg回忆</title>
      <link href="/2022/05/30/Acg%E5%9B%9E%E5%BF%86/"/>
      <url>/2022/05/30/Acg%E5%9B%9E%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><h2 id="画师"><a href="#画师" class="headerlink" title="画师"></a>画师</h2><h3 id="ももこ老师"><a href="#ももこ老师" class="headerlink" title="ももこ老师"></a><a href="https://www.pixiv.net/users/1113943">ももこ老师</a></h3><h3 id="MeIoN"><a href="#MeIoN" class="headerlink" title="MeIoN"></a><a href="https://www.pixiv.net/users/5271609">MeIoN</a></h3><h3 id="mignon"><a href="#mignon" class="headerlink" title="mignon"></a><a href="https://www.pixiv.net/users/24234">mignon</a></h3><h3 id="加瀬大輝"><a href="#加瀬大輝" class="headerlink" title="加瀬大輝"></a><a href="https://www.pixiv.net/users/273185">加瀬大輝</a></h3><h3 id="rurudo"><a href="#rurudo" class="headerlink" title="rurudo"></a><a href="https://www.pixiv.net/users/25760573">rurudo</a></h3><h3 id="甘城なつき"><a href="#甘城なつき" class="headerlink" title="甘城なつき"></a><a href="https://www.pixiv.net/users/3036679">甘城なつき</a></h3><h3 id="そらなにいろ"><a href="#そらなにいろ" class="headerlink" title="そらなにいろ"></a><a href="https://www.pixiv.net/users/4357504">そらなにいろ</a></h3><h3 id="隋文帝"><a href="#隋文帝" class="headerlink" title="隋文帝"></a><a href="https://www.pixiv.net/users/22124330">隋文帝</a></h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Galgame"><a href="#Galgame" class="headerlink" title="Galgame"></a>Galgame</h2><h3 id="穢翼のユースティア"><a href="#穢翼のユースティア" class="headerlink" title="穢翼のユースティア"></a>穢翼のユースティア</h3><h3 id="近月少女的礼仪系列"><a href="#近月少女的礼仪系列" class="headerlink" title="近月少女的礼仪系列"></a>近月少女的礼仪系列</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="兰斯系列"><a href="#兰斯系列" class="headerlink" title="兰斯系列"></a>兰斯系列</h3><h2 id="剧番"><a href="#剧番" class="headerlink" title="剧番"></a>剧番</h2><p><del>暂时咕咕了，等后面剧番索引弄出来再规划这块（卫星）</del></p>]]></content>
      
      
      <categories>
          
          <category> ACG </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>游戏记录</title>
      <link href="/2022/05/30/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/05/30/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="碧蓝航线"><a href="#碧蓝航线" class="headerlink" title="碧蓝航线"></a>碧蓝航线</h2><p><strong>Azur_Lane永远滴神！</strong></p><p><code>服务器： 莱恩演习    Id： 银闪的风    UID： 67308993    Lv： 135</code></p><h3 id="皮肤鉴赏-涩涩！"><a href="#皮肤鉴赏-涩涩！" class="headerlink" title="皮肤鉴赏(涩涩！)"></a>皮肤鉴赏(<del>涩涩！</del>)</h3><p><del>暂时咕咕咕了</del></p><p>终于有皮肤查看的功能了，先展示一波已有皮肤</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/AL_pf1.webp" alt="img" title="皮肤柜"><br><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/AL_pf2.webp" alt="img" title="皮肤柜"><br><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/AL_pf3.webp" alt="img" title="皮肤柜"><br><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/AL_pf4.webp" alt="img" title="皮肤柜"></p><h3 id="纪念"><a href="#纪念" class="headerlink" title="纪念"></a>纪念</h3><p>Lv135: 2022.5.30</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/AL_1.webp" alt="img" title="Lv135纪念"><br><del>Lv140:</del></p><p><del>全图鉴:</del></p><p>全科研: 2022.6.4</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/AL_ky64.webp?AccessKeyId=LTAI5tPVW3HdQrJsL9MwZQKD&Expires=1655211599&Signature=ePFcLj0lWJj0n8x91f3lnie75rQ=" alt="img" title="全科研纪念"></p><h2 id="崩坏3rd"><a href="#崩坏3rd" class="headerlink" title="崩坏3rd"></a>崩坏3rd</h2><p>一名从寂灭退休的养老玩家</p><p><code>服务器： 安卓    Id： 初心勿忘渡余波    UID： </code></p><h3 id="游戏建议"><a href="#游戏建议" class="headerlink" title="游戏建议"></a>游戏建议</h3><p>游戏体验和个人目标会有很大关联程度的影响，放弃无意义的pvp才能更多的体验游戏的乐趣，不然会很痛苦我现在就是。</p><p>初期优先凑齐一两个较为完善的体系，人物武器优先，提高过图体验。如果大小月卡建选择红莲升降，优先角色和皮肤，如果0氪也是推荐优先角色和皮肤然后苦痛养老。</p><h3 id="抽卡记录"><a href="#抽卡记录" class="headerlink" title="抽卡记录"></a>抽卡记录</h3><p>2022.5.20：<br><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/bh_22.5.20.webp" alt="img" title="阿波尼亚沉船记录"></p><h3 id="寂灭记录"><a href="#寂灭记录" class="headerlink" title="寂灭记录"></a>寂灭记录</h3><p>爬！费钱费力，4.15-5.29寂灭保级时间，浪费大量时间消耗精力，我的评价是不如去充碧蓝航线，碧蓝航线永远的神！</p><p>保级记录: </p><ul><li>4.17：识律紫苑</li><li>4.20：虚数神骸阿波尼亚</li><li>5.1： 李素裳阿波尼亚</li><li>5.8： 八重霞炎律</li><li>5.11： 虚数神骸阿波尼亚</li><li>5.15： 月魄星塔</li><li>5.18： 地藏天元</li><li>5.29： 回红莲养老咯</li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>测试服_1: </p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E6%B8%B8%E6%88%8F%E7%BB%8F%E5%8E%86/bh_csf1.webp" alt="img"></p><h2 id="影之诗"><a href="#影之诗" class="headerlink" title="影之诗"></a>影之诗</h2><p>开服玩家，全职业精通但运气不是很好</p><p><code>服务器： 网易    Id： 初心勿忘渡余波    UID： 723489143</code></p><h3 id="如何提高卡牌游戏技术"><a href="#如何提高卡牌游戏技术" class="headerlink" title="如何提高卡牌游戏技术"></a><del>如何提高卡牌游戏技术</del></h3><p><del>运十技零板块作废</del></p><h3 id="回忆录"><a href="#回忆录" class="headerlink" title="回忆录"></a>回忆录</h3><h3 id="抽卡记录-1"><a href="#抽卡记录-1" class="headerlink" title="抽卡记录"></a>抽卡记录</h3><h2 id="300heros"><a href="#300heros" class="headerlink" title="300heros"></a><del>300heros</del></h2><p><del>浪费了很多时间，还没有什么好的回忆的一款游戏，黑历史。没有什么写的价值，看心情补了</del></p><p><del>全能选手，独狼</del></p><h2 id="Others-1"><a href="#Others-1" class="headerlink" title="Others"></a>Others</h2><h3 id="bilibili-Lv6记录"><a href="#bilibili-Lv6记录" class="headerlink" title="bilibili Lv6记录"></a>bilibili Lv6记录</h3><h3 id="网易云-Lv10记录"><a href="#网易云-Lv10记录" class="headerlink" title="网易云 Lv10记录"></a>网易云 Lv10记录</h3>]]></content>
      
      
      <categories>
          
          <category> ACG </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/2022/05/22/git%E6%95%99%E7%A8%8B/"/>
      <url>/2022/05/22/git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Git安装配置"><a href="#Git安装配置" class="headerlink" title="Git安装配置"></a>Git安装配置</h2><h3 id="windows平台安装"><a href="#windows平台安装" class="headerlink" title="windows平台安装"></a>windows平台安装</h3><p>下载地址：<a href="http://git-scm.com/downloads">http://git-scm.com/downloads</a></p><p><a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">国内镜像</a></p><p>安装成功后可以在文件夹内右键看到<code>Git GUI</code>和<code>Git Bash</code></p><p>Git Gui: 图形界面工具</p><p>Git Bash: 命令行工具</p><h3 id="用户信息配置"><a href="#用户信息配置" class="headerlink" title="用户信息配置"></a>用户信息配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--global代表全局去掉之后设置的参数只对当前仓库有效</span><br><span class="line">git config --global user.name Asahi    <span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.email lonely___freedom@163.com    <span class="comment"># 设置邮箱</span></span><br><span class="line"></span><br><span class="line">git config --list    <span class="comment"># 查看已配置信息</span></span><br></pre></td></tr></table></figure><h3 id="个性化设置快捷命令"><a href="#个性化设置快捷命令" class="headerlink" title="个性化设置快捷命令"></a>个性化设置快捷命令</h3><p>git默认文本编辑器为vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.bashrc    <span class="comment"># 创建配置文件（只用创建一次）</span></span><br><span class="line">vim/start ~/.bashrc    <span class="comment"># 编辑(vim/windows)</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc    <span class="comment"># 运行配置文件</span></span><br></pre></td></tr></table></figure><p>个人.bashrc配置，格式<code>alias 命令简称=&#39;命令&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用于输出git提交日志 </span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27; </span><br><span class="line"># 用于输出当前目录所有文件及基本信息 </span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure><h3 id="git布局"><a href="#git布局" class="headerlink" title="git布局"></a>git布局</h3><p><code>工作区(workspace)</code>: 文档目录</p><p><code>暂存区(index)</code>: 一般存放在<code>.git</code>目录下的<code>index</code>文件中，所以我们把暂存区有时也叫作索引（index）</p><p><code>仓库(repository)</code>: 工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是 Git 的版本库</p><h3 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h3><p>创建本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init [path]    <span class="comment"># 初始化本地仓库</span></span><br><span class="line">git add .    <span class="comment"># 将全部文件加入暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;注释&quot;</span>    <span class="comment"># 将缓存区内容提交到仓库</span></span><br></pre></td></tr></table></figure><p>下载仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git lfs install    <span class="comment"># 大文件下载需要</span></span><br><span class="line">git <span class="built_in">clone</span> [-b &lt;brench&gt;] &lt;repo&gt; [path]</span><br></pre></td></tr></table></figure><p>注释: </p><p><code>repo</code>: Git仓库，支持ssh，http(s)，git等协议</p><p><code>[-b &lt;brench&gt;]</code>: 下载对应分支,brench为分支名</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git status [-s]    <span class="comment"># 查看仓库当前状态，显示有变更的文件，简短模式</span></span><br><span class="line">git <span class="built_in">rm</span> [--cached] &lt;file&gt;    <span class="comment"># 将文件从暂存区和工作区[暂存区]删除</span></span><br><span class="line"><span class="comment"># 查看历史提交说明    显示所有分支    简洁显示</span></span><br><span class="line"><span class="comment"># 以图的形式显示    逆向显示    指定用户</span></span><br><span class="line">git <span class="built_in">log</span> [--all] [--oneline] [--graph] [--reverse] [--author=username]</span><br><span class="line">git tag [-a &lt;tagname&gt;] [-m <span class="string">&quot;注释&quot;</span>] [commitID]    <span class="comment"># 创建标签[位置]</span></span><br></pre></td></tr></table></figure><h3 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h3><p><code>git diff</code>    比较文件的不同</p><p><code>git reset</code>    回退版本</p><p><code>git mv</code>    移动或重命名工作区文件</p><p><code>git blame &lt;file&gt;</code>    以列表形式查看指定文件的历史修改记录</p><h3 id="git分支管理"><a href="#git分支管理" class="headerlink" title="git分支管理"></a>git分支管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch    <span class="comment"># 查看本地分支</span></span><br><span class="line">git branch &lt;name&gt;    <span class="comment"># 创建本地分支</span></span><br><span class="line">git checkout &lt;name&gt;    <span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b &lt;name&gt;    <span class="comment"># 创建并切换</span></span><br><span class="line">git branch -d &lt;name&gt;    <span class="comment"># 删除分支，会检查</span></span><br><span class="line">git branch -D &lt;name&gt;    <span class="comment"># 强制删除分支</span></span><br><span class="line">git merge &lt;name&gt;    <span class="comment"># 将分支合并到当前分支</span></span><br></pre></td></tr></table></figure><p>当不同分支修改同一行操作时合并会发生冲突需要去对应文件处理冲突</p><h3 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h3><ol><li><p><code>ssh-keygen -t rsa</code> 生成SSH公钥并复制(<code>cat ~/.ssh/id_rsa.pub</code> 查看公钥)</p></li><li><p>进入github    <code>settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>新建公钥并绑定</p></li><li><p><code>ssh -T git@github.com</code>远端登入测试是否成功，成功会有<code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>显示</p></li><li><p>操作命令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;repo&gt;    <span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote    <span class="comment"># 查看远程仓库</span></span><br><span class="line">git push [-f] origin &lt;本地分支名&gt;[:远程分支名]    <span class="comment"># [强制]推送[如果远程和本地分支名相同即可省略]</span></span><br><span class="line">git pull origin &lt;远程分支名&gt;[:本地分支名]    <span class="comment"># 抓取对应远程并合并</span></span><br><span class="line">git fetch origin [brench]    <span class="comment"># 抓取仓库[分支]</span></span><br></pre></td></tr></table></figure><h3 id="git官方文档"><a href="#git官方文档" class="headerlink" title="git官方文档"></a><a href="http://git-scm.com/docs/git-log/zh_HANS-CN">git官方文档</a></h3>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2022/05/22/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/05/22/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装git并配置SSH绑定Github"><a href="#安装git并配置SSH绑定Github" class="headerlink" title="安装git并配置SSH绑定Github"></a>安装git并配置SSH绑定Github</h3><blockquote><p><a href="http://www.a-sa-hi.top/2022/05/22/git%E8%AF%A6%E8%A7%A3/">git详解</a></p></blockquote><h3 id="安装Node-JS"><a href="#安装Node-JS" class="headerlink" title="安装Node.JS"></a>安装Node.JS</h3><p>官网： <a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>修改全局包路径</p><p>在安装目录中创建文件以下文件：</p><p><code>node_global</code>: 全局包存放</p><p><code>node_cache node</code>: 缓存</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;<span class="built_in">path</span>&quot;    # node_global路径</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;<span class="built_in">path</span>&quot;    # node_cache路径</span><br></pre></td></tr></table></figure><p>修改环境变量</p><p>用户变量的Path中添加node_global路径</p><p>系统变量添加NODE_PATH</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>官网： <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p><code>npm install -g hexo-cli</code></p><p>创建项目hexo-blog并初始化</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><a href="http://www.a-sa-hi.top/2022/05/20/Hexo%E8%AF%A6%E8%A7%A3/">Hexo讲解</a></p><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><ol><li><p><code>npm install hexo-deployer-git --save</code></p></li><li><p>github创建共有仓库<public>，域名为<code>&lt;GitHub 用户名&gt;.github.io</code></p></li><li><p>修改<code>_config.yml</code>中的配置参数</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;ssh地址&gt;</span>    <span class="comment"># git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><h2 id="配置个人域名"><a href="#配置个人域名" class="headerlink" title="配置个人域名"></a>配置个人域名</h2><ol><li>购买域名</li></ol><p><a href="https://www.aliyun.com/?utm_content=se_1012095107">阿里云</a></p><p><a href="https://cloud.tencent.com/?fromSource=gwzcw.2212127.2212127.2212127&utm_medium=cpd&utm_id=gwzcw.2212127.2212127.2212127">腾讯云</a></p><p>注意活动，一般是有首年1元的相关活动</p><ol start="2"><li><p>绑定个人域名</p></li><li><p><code>[Blogroot]\source\</code>中创建CNAME文件，不能有后缀名，建议使用bash创建<code>touch CNAME</code>,在文件中添加个人域名</p></li><li><p>重新部署</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo d g</span><br></pre></td></tr></table></figure><h2 id="修改主题并创作文章"><a href="#修改主题并创作文章" class="headerlink" title="修改主题并创作文章"></a>修改主题并创作文章</h2><p><a href="http://www.a-sa-hi.top/2022/05/21/Butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9/">个人魔改记录</a></p><p><a href="http://www.a-sa-hi.top/2022/05/15/MarkDown/">MarkDown教学</a></p><h2 id="个人图床的搭建"><a href="#个人图床的搭建" class="headerlink" title="个人图床的搭建"></a>个人图床的搭建</h2><h2 id="事情准备"><a href="#事情准备" class="headerlink" title="事情准备"></a>事情准备</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>About： MarkDown编辑查看软件（<del>精简</del>），目前付费买断制</p><p>作用： 编辑修改MD文件，配合PicGo使用快速处理图片</p><p><a href="https://typoraio.cn/">中文官网</a></p><p><a href="">最后的免费版本</a><del>暂时未上传</del></p><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><p>About: 一个用于快速上传图片并获取图片 URL 链接的工具</p><p><a href="https://github.com/PicGo">GitHub</a></p><h2 id="购买OSS并完成相关配置"><a href="#购买OSS并完成相关配置" class="headerlink" title="购买OSS并完成相关配置"></a>购买OSS并完成相关配置</h2><p><a href="https://www.aliyun.com/?utm_content=se_1012095107">阿里云</a></p><p><a href="https://cloud.tencent.com/?fromSource=gwzcw.2212127.2212127.2212127&utm_medium=cpd&utm_id=gwzcw.2212127.2212127.2212127">腾讯云</a></p><p><strong>购买时候记得记录AccessKey钥匙对</strong>配置PicGo</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E8%83%8C%E6%99%AF/%E5%8D%9A%E5%AE%A2_1.webp" title="Typora配置"></p><h2 id="管理图床和图片处理工具"><a href="#管理图床和图片处理工具" class="headerlink" title="管理图床和图片处理工具"></a>管理图床和图片处理工具</h2><p>图床[管理]<a href="https://github.com/aliyun/oss-browser/tree/master">https://github.com/aliyun/oss-browser/tree/master</a></p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2_2.webp"></p><blockquote><p>图片处理工具</p><blockquote><p>Imagine</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2_6.webp"></p></blockquote><blockquote><p>imbatch</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2_3.webp"></p></blockquote><blockquote><p>Light_Image_Resizer</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2_5.webp"></p></blockquote><blockquote><p>reaConverterPro</p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2_4.webp"></p></blockquote></blockquote><p><a href="">工具打包</a><del>暂时未传</del></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题魔改</title>
      <link href="/2022/05/21/Butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9/"/>
      <url>/2022/05/21/Butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="参考前言"><a href="#参考前言" class="headerlink" title="参考前言"></a>参考前言</h2><blockquote><p>部分参考:<br><a href="https://akilar.top/">Akilarの糖果屋</a><br><a href="https://butterfly.js.org/posts/4073eda/">官方文档</a></p></blockquote><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>魔改大部分都是属于前端内容，属于是不务正业了。暂时做出能见人的样子之后应该就会去好好学习了，等找到工作之后再考虑优化的问题了，个人风格还是比较简约的，也不想弄的太花里胡哨。</p><h2 id="1-自定义CSS"><a href="#1-自定义CSS" class="headerlink" title="1.自定义CSS"></a>1.自定义CSS</h2><p>在<code>[博客根目录]/themes/butterfly/source/css/</code>处新建<code>custom.css</code>文件</p><h3 id="背景图渐变效果"><a href="#背景图渐变效果" class="headerlink" title="背景图渐变效果"></a>背景图渐变效果</h3><p>在<code>custom.css</code>中添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*！背景图渐变效果*/</span></span><br><span class="line"><span class="selector-id">#body-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="透明度调整"><a href="#透明度调整" class="headerlink" title="透明度调整"></a>透明度调整</h3><p>在<code>custom.css</code>中添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*页脚透明度调整*/</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 页脚黑色透明玻璃效果移除 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 头图透明 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 头图遮罩层透明 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*top-img黑色透明玻璃效果 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.post-bg</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h3><ol><li><p>在<code>[博客根目录]/themes/butterfly/source/</code>新建文件夹<code>fonts</code><br>将.tff字体文件放进去</p></li><li><p>在<code>custom.css</code>中添加</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自定义字体 */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;字体名&quot;</span>; <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;path&quot;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.butterfly.yml</code>中修改字体配置项</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">&quot;字体名&quot;</span></span><br><span class="line">  <span class="attr">code-font-family:</span></span><br></pre></td></tr></table></figure></li></ol><br><hr><h2 id="2-插件安装"><a href="#2-插件安装" class="headerlink" title="2.插件安装"></a>2.插件安装</h2><h3 id="Aplayer全局播放器"><a href="#Aplayer全局播放器" class="headerlink" title="Aplayer全局播放器"></a>Aplayer全局播放器</h3><blockquote><p>github链接：<a href="https://github.com/MoePlayer/hexo-tag-aplayer">https://github.com/MoePlayer/hexo-tag-aplayer</a><br>官方讲解：<a href="https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80">https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80</a></p></blockquote><ol><li><p><code>npm install hexo-tag-aplayer --save</code></p></li><li><p>在<code>_config.yml</code>中新增配置项</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APlayer</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.butterfly.yml</code>中修改关于Aplayer配置项</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.butterfly.yml</code>的<code>inject</code>配置项中添加Aplayer的容器</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">参数&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>参数设置</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><ol start="5"><li>局部文章使用</li></ol><p><code>&lt;div class=&quot;aplayer&quot; data-id=&quot;&quot; data-server=&quot;&quot; data-type=&quot;&quot; &gt;&lt;/div&gt;</code></p><br><h3 id="页脚添加时钟和github徽标"><a href="#页脚添加时钟和github徽标" class="headerlink" title="页脚添加时钟和github徽标"></a>页脚添加时钟和github徽标</h3><blockquote><p>插件文档： <a href="https://www.npmjs.com/package/hexo-butterfly-footer-beautify">https://www.npmjs.com/package/hexo-butterfly-footer-beautify</a></p></blockquote><ol><li><p><code>npm install hexo-butterfly-footer-beautify --save</code></p></li><li><p>在<code>_config.yml</code>中新增配置项</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># footer_beautify</span></span><br><span class="line"><span class="attr">footer_beautify:</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="literal">true</span> <span class="comment"># 计时器开关</span></span><br><span class="line">    <span class="attr">bdage:</span> <span class="literal">true</span> <span class="comment"># 徽标开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">footer-wrap</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 计时器部分配置项</span></span><br><span class="line">  <span class="attr">runtime_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span></span><br><span class="line">  <span class="attr">runtime_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css</span></span><br><span class="line">  <span class="comment"># 徽标部分配置项</span></span><br><span class="line">  <span class="attr">swiperpara:</span> <span class="number">3</span> <span class="comment">#若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span>  <span class="comment">#徽标指向网站链接</span></span><br><span class="line">      <span class="attr">shields:</span>  <span class="comment">#徽标API</span></span><br><span class="line">      <span class="attr">message:</span>  <span class="comment">#徽标提示语</span></span><br></pre></td></tr></table></figure><br><h3 id="侧栏添加时钟模块"><a href="#侧栏添加时钟模块" class="headerlink" title="侧栏添加时钟模块"></a>侧栏添加时钟模块</h3><blockquote><p>插件文档： <a href="https://www.npmjs.com/package/hexo-butterfly-swiper">https://www.npmjs.com/package/hexo-butterfly-swiper</a></p></blockquote><ol><li><p>安装<code>https://www.npmjs.com/package/hexo-butterfly-clock</code>插件</p></li><li><p>在<code>_config.yml</code>中新增配置项</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-clock/lib/loading.gif</span> <span class="comment">#加载动画自定义</span></span><br><span class="line">  <span class="attr">clock_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-clock/lib/clock.min.css</span></span><br><span class="line">  <span class="attr">clock_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-clock/lib/clock.min.js</span></span><br><span class="line">  <span class="attr">ip_api:</span> <span class="string">https://pv.sohu.com/cityjson?ie=utf-8</span></span><br></pre></td></tr></table></figure></li></ol><br><h3 id="首页文章轮播"><a href="#首页文章轮播" class="headerlink" title="首页文章轮播"></a>首页文章轮播</h3><blockquote><p>插件文档： <a href="https://www.npmjs.com/package/hexo-butterfly-swiper">https://www.npmjs.com/package/hexo-butterfly-swiper</a></p></blockquote><ol><li><p><code>npm install hexo-butterfly-swiper --save</code></p></li><li><p>在<code>_config.yml</code>中新增配置项</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">error_img:</span>  <span class="comment">#封面图片加载失败的默认封面</span></span><br><span class="line">  <span class="attr">insertposition:</span> <span class="string">afterbegin</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="comment">#默认文章描述</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用方法</li></ol><p>在文章的<code>front_matter</code>中添加<code>swiper_index</code>配置项即可</p><pre><code><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">swiper<span class="emphasis">_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure></code></pre><br><hr><h2 id="3-代码修改"><a href="#3-代码修改" class="headerlink" title="3.代码修改"></a>3.代码修改</h2><blockquote><p>前言： 代码修改部分建议将原代码注释而不是替换</p></blockquote><h3 id="推荐板块侧栏卡片化"><a href="#推荐板块侧栏卡片化" class="headerlink" title="推荐板块侧栏卡片化"></a>推荐板块侧栏卡片化</h3><blockquote><p>参考：<a href="https://akilar.top/posts/194e1534/">https://akilar.top/posts/194e1534/</a></p></blockquote><ol><li>修改<code>[Blogroot]\themes\butterfly\scripts\helpers\related_post.js</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (relatedPosts.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    result += <span class="string">&#x27;&lt;div class=&quot;card-widget card-recommend-post&quot;&gt;&#x27;</span></span><br><span class="line">    result += <span class="string">`&lt;div class=&quot;item-headline&quot;&gt;&lt;i class=&quot;fas fa-dharmachakra&quot;&gt;&lt;/i&gt;&lt;span&gt;<span class="subst">$&#123;headlineLang&#125;</span>&lt;/span&gt;&lt;/div&gt;`</span></span><br><span class="line">    result += <span class="string">&#x27;&lt;div class=&quot;aside-list&quot;&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">Math</span>.<span class="title function_">min</span>(relatedPosts.<span class="property">length</span>, limitNum); i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> cover =</span><br><span class="line">        relatedPosts[i].<span class="property">cover</span> === <span class="literal">false</span></span><br><span class="line">          ? relatedPosts[i].<span class="property">randomcover</span></span><br><span class="line">          : relatedPosts[i].<span class="property">cover</span></span><br><span class="line">      result += <span class="string">`&lt;div class=&quot;aside-list-item&quot;&gt;`</span></span><br><span class="line">      result += <span class="string">`&lt;a class=&quot;thumbnail&quot; href=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.url_for(relatedPosts[i].path)&#125;</span>&quot; title=&quot;<span class="subst">$&#123;relatedPosts[i].title&#125;</span>&quot;&gt;&lt;img src=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.url_for(cover)&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;relatedPosts[i].title&#125;</span>&quot;&gt;&lt;/a&gt;`</span></span><br><span class="line">      result += <span class="string">`&lt;div class=&quot;content&quot;&gt;`</span></span><br><span class="line">      result += <span class="string">`&lt;a class=&quot;title&quot; href=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.url_for(relatedPosts[i].path)&#125;</span>&quot; title=&quot;<span class="subst">$&#123;relatedPosts[i].title&#125;</span>&quot;&gt;<span class="subst">$&#123;relatedPosts[i].title&#125;</span>&lt;/a&gt;`</span></span><br><span class="line">      <span class="keyword">if</span> (dateType === <span class="string">&#x27;created&#x27;</span>) &#123;</span><br><span class="line">        result += <span class="string">`&lt;time datetime=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.date(relatedPosts[i].created, hexoConfig.date_format)&#125;</span>&quot; title=&quot;发表于 <span class="subst">$&#123;<span class="variable language_">this</span>.date(relatedPosts[i].created, hexoConfig.date_format)&#125;</span>&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.date(relatedPosts[i].created, hexoConfig.date_format)&#125;</span>&lt;/time&gt;`</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result += <span class="string">`&lt;time datetime=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.date(relatedPosts[i].updated, hexoConfig.date_format)&#125;</span>&quot; title=&quot;发表于 <span class="subst">$&#123;<span class="variable language_">this</span>.date(relatedPosts[i].updated, hexoConfig.date_format)&#125;</span>&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.date(relatedPosts[i].updated, hexoConfig.date_format)&#125;</span>&lt;/time&gt;`</span></span><br><span class="line">      &#125;</span><br><span class="line">      result += <span class="string">`&lt;/div&gt;&lt;/div&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    result += <span class="string">&#x27;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><ol start="2"><li>将推荐从文章底改到侧边栏</li></ol><p>修改<code>[Blogroot]\themes\butterfly\layout\post.pug</code>,移除下面部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">if</span> theme.<span class="property">related_post</span> &amp;&amp; theme.<span class="property">related_post</span>.<span class="property">enable</span></span><br><span class="line">-   != <span class="title function_">related_posts</span>(page,site.<span class="property">posts</span>)</span><br></pre></td></tr></table></figure><br><h3 id="矢量图标"><a href="#矢量图标" class="headerlink" title="矢量图标"></a>矢量图标</h3><blockquote><p>官方文档： <a href="https://butterfly.js.org/posts/4073eda/#iconfont">https://butterfly.js.org/posts/4073eda/#iconfont</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo教程</title>
      <link href="/2022/05/20/Hexo%E6%95%99%E7%A8%8B/"/>
      <url>/2022/05/20/Hexo%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|---_config.yml    # 配置参数文件</span><br><span class="line"></span><br><span class="line">|---package.json    # 应用程序的信息</span><br><span class="line"></span><br><span class="line">|---scaffolds    # 模板文件夹</span><br><span class="line"></span><br><span class="line">|   |---_drafts</span><br><span class="line"></span><br><span class="line">|   └--—_post    # 默认模板</span><br><span class="line"></span><br><span class="line">└---themes    # 主题文件夹，用于生成静态页面</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><ul><li>添加分类页面和标签页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo new page categories</span><br><span class="line"></span><br><span class="line">hexo new page tags</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>加入头部属性</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">title: categories</span><br><span class="line"></span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line"></span><br><span class="line">type: &quot;categories&quot;    //增加项</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">title: categories</span><br><span class="line"></span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line"></span><br><span class="line">type: &quot;tags&quot;    //增加项</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>文本最上方以<code>---</code>分隔区域（md格式）</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">title: 标题</span><br><span class="line"></span><br><span class="line">date: 日期</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用预定义参数：</p><p>参数 | 描述 | 默认值</p><p>— | — | —</p><p><code>layout</code> | 布局 | <a href="/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></p><p><code>title</code> | 标题 | 文章的文件名</p><p><code>date</code> | 建立日期 | 文件建立日期</p><p><code>updated</code> | 更新日期 | 文件更新日期</p><p><code>comments</code> | 开启文章的评论功能 | true</p><p><code>tags</code> | 标签（不适用于分页） |</p><p><code>categories</code> | 分类（不适用于分页）|</p><p><code>permalink</code> | 覆盖文章网址 |</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lang` | 设置语言 | 继承 `_config.yml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">categories:</span><br><span class="line"></span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line"></span><br><span class="line">- [Diary, Games]</span><br><span class="line"></span><br><span class="line">- [Life]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>对应命令 -h 可以查看所有参数，如<code>hexo init -h</code></p><h3 id="hexo-init-folder"><a href="#hexo-init-folder" class="headerlink" title="hexo init [folder]"></a>hexo init [folder]</h3><p>在指定文件创建主题,默认当前文件</p><h3 id="hexo-new-layout-“title”"><a href="#hexo-new-layout-“title”" class="headerlink" title="hexo new [layout]  “title”"></a>hexo new [layout]  “title”</h3><p>使用指定模板创建文章，默认使用<code>_config.yml</code>里的<code>dafault_layout</code>参数。标题中有空格需要””括起来。</p><p>参数 | 描述</p><p>— | —</p><p><code>-p</code>, <code>--path</code> | 自定义新文章的路径</p><p><code>-r</code>, <code>--replace</code> | 如果存在同名文章，将其替换</p><p><code>-s</code>, <code>--slug</code> | 文章的 Slug，作为新文章的文件名和发布后的 URL</p><h3 id="hexo-generate-g"><a href="#hexo-generate-g" class="headerlink" title="hexo generate(g)"></a>hexo generate(g)</h3><p>生成静态文件</p><p>选项 | 描述</p><p>— | —</p><p><code>-d</code>, <code>--deploy</code> | 文件生成后立即部署网站</p><p><code>-w</code>, <code>--watch</code> | 监视文件变动</p><p><code>-b</code>, <code>--bail</code> | 生成过程中如果发生任何未处理的异常则抛出异常</p><p><code>-f</code>, <code>--force</code> | 强制重新生成文件</p><p><code>-c</code>, <code>--concurrency</code> | 最大同时生成文件的数量，默认无限制</p><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h3><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><p>选项 | 描述</p><p>— | —</p><p><code>-p</code>, <code>--port</code> | 重设端口</p><p><code>-s</code>, <code>--static</code> | 只使用静态文件</p><p><code>-l</code>, <code>--log</code> | 启动日记记录，使用覆盖记录格式</p><h3 id="hexo-deploy-d"><a href="#hexo-deploy-d" class="headerlink" title="hexo deploy(d)"></a>hexo deploy(d)</h3><p>部署网站</p><p>参数 | 描述</p><p>参数 | 描述</p><p>— | —</p><p><code>-g</code>, <code>--generate</code> | 部署之前预先生成静态文件</p><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><p>清除缓存文件和已生成的静态文件</p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo list &lt;type&gt;    # 列出网站资料</span><br><span class="line"></span><br><span class="line">hexo version    # 显示hexo版本</span><br><span class="line"></span><br><span class="line">hexo --safe    # 进入安全模式</span><br><span class="line"></span><br><span class="line">hexo --debug    # 进入调试模式</span><br><span class="line"></span><br><span class="line">hexo --silent    # 简洁模式</span><br><span class="line"></span><br><span class="line">hexo --draft    # 显示草稿</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法笔记</title>
      <link href="/2022/05/15/MarkDown/"/>
      <url>/2022/05/15/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. <font color=red><strong>基本语法</strong></font></h1><h2 id="1-1-标题语法"><a href="#1-1-标题语法" class="headerlink" title="1.1 标题语法"></a>1.1 <font color=blue><em>标题语法</em></font></h2><h3 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h3><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2_7.webp"></p><br><h3 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><br><h2 id="1-2-换行语法"><a href="#1-2-换行语法" class="headerlink" title="1.2 换行语法"></a>1.2 <font color=blue><em>换行语法</em></font></h2><p>两个空格加回车（Shift + Enter）</p><p>或者通过html语言<code>&lt;br&gt;</code>实现</p><h2 id="1-3-字体设置"><a href="#1-3-字体设置" class="headerlink" title="1.3 字体设置"></a>1.3 <font color=blue><em>字体设置</em></font></h2><table><thead><tr><th align="center">语法</th><th align="center">样式</th></tr></thead><tbody><tr><td align="center"><code>*内容*</code></td><td align="center"><em>斜体</em></td></tr><tr><td align="center"><code>**内容**</code></td><td align="center"><strong>加粗</strong></td></tr><tr><td align="center"><code>***内容***</code></td><td align="center"><em><strong>斜线加粗</strong></em></td></tr><tr><td align="center"><code>~~内容~~</code></td><td align="center"><del>删除线</del></td></tr><tr><td align="center"><code>_内容_</code></td><td align="center"><em>下划线</em></td></tr></tbody></table><br><h2 id="1-4-引用语法"><a href="#1-4-引用语法" class="headerlink" title="1.4 引用语法"></a>1.4 <font color=blue><em>引用语法</em></font></h2><p>段落前添加<code>&gt;</code></p><blockquote><p>Chibaku Tensei</p></blockquote><p>使用多个<code>&gt;</code>嵌套引用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;kokowohajime sekainiitamiwokanjisaseyo</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;&gt;Shinratensei</span></span><br></pre></td></tr></table></figure><blockquote><p><code>kokowohajime sekainiitamiwokanjisaseyo</code></p><blockquote><p><code>Shinratensei</code></p></blockquote></blockquote><br><h2 id="1-5-列表语法"><a href="#1-5-列表语法" class="headerlink" title="1.5 列表语法"></a>1.5 <font color=blue><em>列表语法</em></font></h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用 <code>* </code>，<code>+ </code>，<code>- </code> 表示无序列表</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 一个人，要犯下多少恶行</span><br><span class="line"><span class="bullet">+</span> 才能在地狱的尽头，将她带回黎明</span><br><span class="line"><span class="bullet">-</span> 一个人，要走多远的距离</span><br><span class="line"><span class="bullet">*</span> 才能在时光的尽头，追回最初的自己</span><br></pre></td></tr></table></figure><ul><li>一个人，要犯下多少恶行</li></ul><ul><li>才能在地狱的尽头，将她带回黎明</li></ul><ul><li>一个人，要走多远的距离</li></ul><ul><li>才能在时光的尽头，追回最初的自己</li></ul><br><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字+<code>. </code>+内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 操作系统</span><br><span class="line"><span class="bullet">2.</span> 数据结构</span><br><span class="line"><span class="bullet">3.</span> 设计模式</span><br></pre></td></tr></table></figure><ol><li>操作系统</li><li>数据结构</li><li>设计模式</li></ol><br><h2 id="1-6-代码语法"><a href="#1-6-代码语法" class="headerlink" title="1.6 代码语法"></a>1.6 <font color=blue><em>代码语法</em></font></h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><p>`代码`</p><p><code>MakrDown</code></p><br><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>4个空格或一个制表符</p><pre><code>int main()&#123;    return 0;&#125;</code></pre><br><h3 id="代码块加高亮"><a href="#代码块加高亮" class="headerlink" title="代码块加高亮"></a>代码块加高亮</h3><p>使用``````包裹代码，第一个```后面可以设置对应语言</p><br><h2 id="1-7-分割线"><a href="#1-7-分割线" class="headerlink" title="1.7 分割线"></a>1.7 <font color=blue><em>分割线</em></font></h2><p>三个以上的*、-、_来建立一个分隔线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***  </span><br><span class="line">---  </span><br><span class="line">___</span><br></pre></td></tr></table></figure><hr><hr><hr><br><h2 id="1-8-链接语法"><a href="#1-8-链接语法" class="headerlink" title="1.8 链接语法"></a>1.8 <font color=blue><em>链接语法</em></font></h2><h3 id="文本链接"><a href="#文本链接" class="headerlink" title="文本链接"></a>文本链接</h3><p><code>[文本](url &quot;title&quot;)</code></p><p><code>[百度](http://www.baidu.com &quot;百度一下你就知道&quot;)</code></p><p><a href="http://www.baidu.com/" title="百度一下你就知道">百度</a></p><h3 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h3><p><code>&lt;url&gt;</code></p><p><a href="https://space.bilibili.com/3469335">https://space.bilibili.com/3469335</a></p><h3 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h3><p><code>[name][num]</code></p><p><code>[num]: url</code></p><p><code>[百度][1]</code></p><p><code>[1]: http://www.baidu.com</code></p><p><a href="http://www.baidu.com/">百度</a></p><br><h2 id="1-9-图片语法"><a href="#1-9-图片语法" class="headerlink" title="1.9 图片语法"></a>1.9 <font color=blue><em>图片语法</em></font></h2><h3 id="本地插入"><a href="#本地插入" class="headerlink" title="本地插入"></a>本地插入</h3><p><font color=red><strong>只能使用相对路径</strong></font></p><p><code>![图片描述](path)</code></p><p><code>![美少女](/jpg/1.jpg)</code></p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E5%B0%81%E9%9D%A2/%E5%B0%81%E9%9D%A2_13.webp" alt="美少女"></p><br><h3 id="网络插入"><a href="#网络插入" class="headerlink" title="网络插入"></a>网络插入</h3><p><code>![图片描述](url &quot;title&quot;)</code></p><p><code>![背景](https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/img/202205191821186.png)</code></p><p><img src="https://bucket-picture-bed.oss-cn-shanghai.aliyuncs.com/%E8%83%8C%E6%99%AF/%E8%83%8C%E6%99%AF_1.webp" alt="背景"></p><br><hr><h1 id="2-进阶操作"><a href="#2-进阶操作" class="headerlink" title="2. 进阶操作"></a>2. <font color=red><strong>进阶操作</strong></font></h1><h2 id="2-1-表格"><a href="#2-1-表格" class="headerlink" title="2.1 表格"></a>2.1 <font color=blue><em>表格</em></font></h2><ol><li>第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</li><li>列于列之间用管道符|隔开。</li><li><code>:---:</code>: 两端对齐    <code>---:</code>: 右对齐</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|</span><br><span class="line">|---|---|</span><br><span class="line">|文本|文本|</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|制作商|游戏|</span><br><span class="line">|:---:|:---:|</span><br><span class="line">|Mihoyo|崩坏3rd|</span><br><span class="line">|Cygames|影之诗|</span><br><span class="line">|黄鸡|碧蓝航线|</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">制作商</th><th align="center">游戏</th></tr></thead><tbody><tr><td align="center">Mihoyo</td><td align="center">崩坏3rd</td></tr><tr><td align="center">Cygames</td><td align="center">影之诗</td></tr><tr><td align="center">黄鸡</td><td align="center">碧蓝航线</td></tr></tbody></table><br><h2 id="2-2-注脚"><a href="#2-2-注脚" class="headerlink" title="2.2 注脚"></a>2.2 <font color=blue><em>注脚</em></font></h2><p><code>内容[^num]</code></p><p><code>[^num]: 注释</code></p><p>条条大路通罗马<a href="%E6%9C%89%E4%BA%BA%E5%87%BA%E7%94%9F%E5%B0%B1%E5%9C%A8%E7%BD%97%E9%A9%AC">^1</a></p><br><h2 id="2-3-标题编号"><a href="#2-3-标题编号" class="headerlink" title="2.3 标题编号"></a>2.3 <font color=blue><em>标题编号</em></font></h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><code># 标题 大括号#编号大括号</code></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="#1">返回顶部</a></p><h2 id="2-4-定义列表"><a href="#2-4-定义列表" class="headerlink" title="2.4 定义列表"></a>2.4 <font color=blue><em>定义列表</em></font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">列表名</span><br><span class="line">: 内容</span><br></pre></td></tr></table></figure><dl><dt>自定义列表<br>: 我只是一个路过的普通人</dt><dd>普通高中生</dd></dl><h2 id="2-5-Tudo列表"><a href="#2-5-Tudo列表" class="headerlink" title="2.5 Tudo列表"></a>2.5 <font color=blue><em>Tudo列表</em></font></h2><p><code>- [x] 文本</code></p><p><code>- [x] 学习</code><br><code>- [ ] 运动</code></p><ul><li><input checked="" disabled="" type="checkbox"> 学习</li><li><input disabled="" type="checkbox"> 运动</li></ul><br><h2 id="2-6-流程图"><a href="#2-6-流程图" class="headerlink" title="2.6 流程图"></a>2.6 <font color=blue><em>流程图</em></font></h2><p>需要自行复制代码到MD中查看效果</p><p>1、横向流程图源码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><p>2、竖向流程图源码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure><p>3、标准流程图源码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p>4、标准流程图源码格式（横向）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p>5、UML时序图源码样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><p>6、UML时序图源码复杂样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><p>7、UML标准时序图样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><p>8、甘特图样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title 软件开发甘特图</span><br><span class="line">section 设计</span><br><span class="line">需求: done, des1, 2014-01-06, 2014-01-08</span><br><span class="line">原型: active, des2, 2014-01-09, 3d</span><br><span class="line">UI设计: des3, after des2, 5d</span><br><span class="line">未来任务: des4, after des3, 5d</span><br><span class="line">section 开发</span><br><span class="line">学习准备理解需求: crit, done, 2014-01-06, 24h</span><br><span class="line">设计框架:crit, done, after des2, 2d</span><br><span class="line">开发:crit, active, 3d</span><br><span class="line">未来任务:crit, 5d</span><br><span class="line">耍: 2d</span><br><span class="line">section 测试</span><br><span class="line">功能测试: active, a1, after des3, 3d</span><br><span class="line">压力测试: after a1  , 20h</span><br><span class="line">测试报告: 48h</span><br></pre></td></tr></table></figure><br><h2 id="2-7-LaTex-施工中"><a href="#2-7-LaTex-施工中" class="headerlink" title="2.7 LaTex(施工中)"></a>2.7 <font color=blue>LaTex(施工中)</font></h2><br><br><hr><h1 id="3-Html相关"><a href="#3-Html相关" class="headerlink" title="3. Html相关"></a>3. <font color=red><strong>Html相关</strong></font></h1><h2 id="3-1-字体、字号与颜色"><a href="#3-1-字体、字号与颜色" class="headerlink" title="3.1 字体、字号与颜色"></a>3.1 <font color=blue><em>字体、字号与颜色</em></font></h2><p><code>&lt;font color=&quot;&quot; size=&quot;&quot; face=&quot;&quot;&gt;文本&lt;/font&gt; //颜色 大小 字体</code></p><p>例<code>&lt;font color=red size=20 face=&quot;宋体&quot;&gt;炎狱灼心&lt;/font&gt;</code></p><p><font color=red size=20 face="宋体">炎狱灼心</font></p><p>常用颜色代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">black #000000  </span><br><span class="line">white #FFFFFF  </span><br><span class="line">red #FF0000  </span><br><span class="line">blue #0000FF  </span><br><span class="line">green #008000  </span><br></pre></td></tr></table></figure><br><h2 id="3-2-背景色"><a href="#3-2-背景色" class="headerlink" title="3.2 背景色"></a>3.2 <font color=blue><em>背景色</em></font></h2><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现：借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。</p><p><code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;&quot;&gt;文本&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></p><p>例<code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=red&gt;心如磐石&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></p><table><tr><td bgcolor=red>心如磐石</td></tr></table><br><hr><h1 id="4-技巧"><a href="#4-技巧" class="headerlink" title="4. 技巧"></a>4. <font color=red><strong>技巧</strong></font></h1><h2 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a><font color=blue><em>快捷操作</em></font></h2><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center">Ctrl + B</td></tr><tr><td align="center">斜体</td><td align="center">Ctrl + I</td></tr><tr><td align="center">引用</td><td align="center">Ctrl + Q</td></tr><tr><td align="center">插入链接</td><td align="center">Ctrl + L</td></tr><tr><td align="center">插入代码</td><td align="center">Ctrl + K</td></tr><tr><td align="center">插入图片</td><td align="center">Ctrl + G</td></tr><tr><td align="center">提升标题</td><td align="center">Ctrl + H</td></tr><tr><td align="center">有序列表</td><td align="center">Ctrl + O</td></tr><tr><td align="center">无序列表</td><td align="center">Ctrl + U</td></tr><tr><td align="center">横线</td><td align="center">Ctrl + R</td></tr><tr><td align="center">撤销</td><td align="center">Ctrl + Z</td></tr><tr><td align="center">重做</td><td align="center">Ctrl + Y</td></tr><tr><td align="center">换行</td><td align="center">Shift + Enter</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
